[{"C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\index.jsx":"1","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\App.jsx":"2","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\state.js":"3","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\utility.js":"4","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\services\\user.service.js":"5","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Login\\index.jsx":"6","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\index.jsx":"7","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\index.jsx":"8","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Rooms\\index.jsx":"9","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Users\\index.jsx":"10","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\components\\MsgRec.jsx":"11","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\components\\MsgSnd.jsx":"12","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Rooms\\components\\ChatListItem\\index.jsx":"13","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\StatusComponent.jsx":"14","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\components\\components\\Timer\\index.jsx":"15"},{"size":307,"mtime":1695594965720,"results":"16","hashOfConfig":"17"},{"size":4685,"mtime":1697677818393,"results":"18","hashOfConfig":"17"},{"size":3181,"mtime":1697113796731,"results":"19","hashOfConfig":"17"},{"size":3475,"mtime":1697411883995,"results":"20","hashOfConfig":"17"},{"size":1853,"mtime":1697411993036,"results":"21","hashOfConfig":"17"},{"size":2523,"mtime":1697136502901,"results":"22","hashOfConfig":"17"},{"size":8273,"mtime":1697766523982,"results":"23","hashOfConfig":"17"},{"size":5137,"mtime":1697756653955,"results":"24","hashOfConfig":"17"},{"size":1322,"mtime":1697318863061,"results":"25","hashOfConfig":"17"},{"size":2007,"mtime":1697672813079,"results":"26","hashOfConfig":"17"},{"size":2263,"mtime":1697761005149,"results":"27","hashOfConfig":"17"},{"size":2584,"mtime":1697761003149,"results":"28","hashOfConfig":"17"},{"size":1596,"mtime":1697318811369,"results":"29","hashOfConfig":"17"},{"size":317,"mtime":1697075479148,"results":"30","hashOfConfig":"17"},{"size":381,"mtime":1697759762587,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"vziwdd",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\index.jsx",[],["72","73"],"C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\App.jsx",["74","75","76"],"import React, { useEffect, useCallback } from \"react\";\r\nimport Login from \"./components/Login\";\r\nimport Chat from \"./components/Chat\";\r\nimport { getOnlineUsers, getRooms } from \"./services/user.service\";\r\nimport useAppStateContext, { AppContext } from \"./state\";\r\nimport moment from \"moment\";\r\nimport { useSocket, useUser } from \"./utility\";\r\nimport { Navbar, Row, Container, Stack } from \"react-bootstrap\";\r\n\r\nconst App = () => {\r\n  const [state, dispatch] = useAppStateContext();\r\n  const onUserLoaded = useCallback(\r\n    (user) => {\r\n      if (user !== null) {\r\n        if (!state.users[user.id]) {\r\n          dispatch({ type: \"set user\", payload: { ...user, online: true } });\r\n        }\r\n      }\r\n    },\r\n    [dispatch, state.users]\r\n  );\r\n\r\n  const room_name_transform = (names, username) => {\r\n    for (let name of names) {\r\n      if (typeof name !== 'string') {\r\n        name = name[0];\r\n      }\r\n      if (name !== username) {\r\n        return name;\r\n      }\r\n    }\r\n    return names[0];\r\n  };\r\n\r\n  const { user, onLogIn, onLogOut, loading } = useUser(onUserLoaded, dispatch);\r\n  const [socket, connected] = useSocket(user, dispatch);\r\n\r\n  useEffect(() => {\r\n    if (user === null) return;\r\n    if (connected) {\r\n\r\n      const newRooms = [];\r\n      Object.keys(state.rooms).forEach((roomId) => {\r\n        const room = state.rooms[roomId];\r\n        if (room.connected) {\r\n          return;\r\n        }\r\n        newRooms.push({ ...room, connected: true });\r\n        socket.emit(\"room.join\", room.id);\r\n      });\r\n      if (newRooms.length !== 0) {\r\n        dispatch({ type: \"set rooms\", payload: newRooms });\r\n      }\r\n    } else {\r\n\r\n      const newRooms = [];\r\n      Object.keys(state.rooms).forEach((roomId) => {\r\n        const room = state.rooms[roomId];\r\n        if (!room.connected) {\r\n          return;\r\n        }\r\n        newRooms.push({ ...room, connected: false });\r\n      });\r\n      if (newRooms.length !== 0) {\r\n        dispatch({ type: \"set rooms\", payload: newRooms });\r\n      }\r\n    }\r\n  }, [user, connected, dispatch, socket, state.rooms, state.users]);\r\n\r\n  useEffect(() => {\r\n    if (Object.values(state.rooms).length === 0 && user !== null) {\r\n      getOnlineUsers().then((users) => {\r\n        dispatch({\r\n          type: \"add users\",\r\n          payload: users,\r\n        });\r\n      });\r\n      getRooms(user.id).then((rooms) => {\r\n        const payload = [];\r\n        rooms.forEach(({ id, names }) => {\r\n          payload.push({ id, name: room_name_transform(names, user.username) });\r\n        });\r\n        dispatch({\r\n          type: \"set rooms\",\r\n          payload,\r\n        });\r\n        dispatch({ type: \"set current room\", payload: \"0\" });\r\n      });\r\n    }\r\n  }, [dispatch, state.rooms, user]);\r\n\r\n  const onMessageSend = useCallback(\r\n    (message, roomId, expSec, type) => {\r\n      console.log(message)\r\n      if (type == \"text\" && (typeof message !== \"string\" || message.trim().length === 0))  return;\r\n      console.log(\"testend\")\r\n      if (!socket) {\r\n        console.error(\"Couldn't send message\");\r\n      }\r\n      socket.emit(\"message\", {\r\n        roomId: roomId,\r\n        type: type,\r\n        message,\r\n        from: user.id,\r\n        expSec: expSec,\r\n        date: moment(new Date()).unix(),\r\n      });console.log(\"message sent: \", message)\r\n    },\r\n    [user, socket]\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"centered-box\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"visually-hidden\" />\r\n        </div>\r\n      </div>\r\n   );\r\n  }\r\n\r\n  const showLogin = !user;\r\n\r\n  return (\r\n    <AppContext.Provider value={[state, dispatch]}>\r\n      <div className={`full-height `} style={{backgroundColor:\"#0F4C75\"}}>\r\n        <Navbar className=\"navbar navbar-expand-lg navbar-dark bg-body-tertiary \" style={{backgroundColor:\"#1B262C\"}}>\r\n          <Container>\r\n            <Navbar.Brand href=\"#home\">KeyDB chat app</Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            {!showLogin &&(\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n              <Navbar.Text style={{fontSize:\"16px\"}}>\r\n                {user.username}\r\n              </Navbar.Text>\r\n              \r\n              <Navbar.Text xs={4}  className=\"text-danger ml-3\" style={{ cursor: \"pointer\" }} onClick={onLogOut}>\r\n                Log out\r\n              </Navbar.Text>\r\n            </Navbar.Collapse>\r\n            )}\r\n          </Container>\r\n        </Navbar>\r\n        {showLogin ? (\r\n          <Login onLogIn={onLogIn} />\r\n        ) : (\r\n          <Chat user={user} onMessageSend={onMessageSend} onLogOut={onLogOut} />\r\n        )}\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\state.js",[],"C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\utility.js",[],"C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\services\\user.service.js",[],"C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Login\\index.jsx",["77","78","79","80"],"import { Toast, Form, Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nexport default function Login({ onLogIn }) {\r\n  const [username, setUsername] = useState(\"username\");\r\n  const [password, setPassword] = useState(\"password123\");\r\n  const [error, setError] = useState(null);\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    onLogIn(username, password, setError);\r\n  };\r\n\r\n  return (\r\n      <Container className=\" text-center login-page\">\r\n          <Form onSubmit={onSubmit} className=\"bg-white text-left px-4\" style={{ paddingTop: 55}}>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Username:</Form.Label>\r\n              <Form.Control\r\n                value={username}\r\n                onChange={(event) => setUsername(event.target.value)}\r\n                type=\"text\"\r\n                id=\"inputUsername\"\r\n                placeholder=\"Username\"\r\n                required\r\n              />            \r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"inputPassword\" className=\"font-size-12\">\r\n                Password:\r\n              </Form.Label>\r\n              <Form.Control\r\n                value={password}\r\n                onChange={(event) => setPassword(event.target.value)}\r\n                type=\"password\"\r\n                id=\"inputPassword\"\r\n                placeholder=\"Password\"\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <div style={{ height: 24 }}> </div>\r\n            <Button className=\"btn-lg mb-5 btn-primary btn-block\" type=\"submit\">\r\n              Sign in\r\n            </Button>\r\n            <div className=\"login-error-anchor\">\r\n              <div className=\"toast-box\">\r\n                <Toast\r\n                  style={{ minWidth: 277 }}\r\n                  onClose={() => setError(null)}\r\n                  show={error !== null}\r\n                  delay={3000}\r\n                  autohide\r\n                >\r\n                  <Toast.Header>\r\n                    <img\r\n                      src=\"holder.js/20x20?text=%20\"\r\n                      className=\"mr-2\"\r\n                      alt=\"\"\r\n                    />\r\n                    <strong className=\"mr-auto\">Error</strong>\r\n                  </Toast.Header>\r\n                  <Toast.Body>{error}</Toast.Body>\r\n                </Toast>\r\n              </div>\r\n            </div>\r\n          </Form>\r\n      </Container>\r\n  );\r\n}\r\n\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\index.jsx",["81","82","83","84"],"import React, { useState } from \"react\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport Rooms from \"./components/Rooms\";\r\nimport Messages from \"./components/Messages\";\r\nimport Users from \"./components/Users\";\r\nimport { useAppState } from \"../../state\";\r\nimport { addRoom, getMessages } from \"../../services/user.service\";\r\nimport { useCallback } from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { getUsers } from \"../../services/user.service\";\r\n\r\nexport default function Chat({ onLogOut, user, onMessageSend }) {\r\n  const [state, dispatch] = useAppState();\r\n  const messageListElement = useRef(null);\r\n  const [showUploadFile, setShowUploadFile] = useState(false)\r\n\r\n  const socketRef = useRef(null);\r\n  const socket = socketRef.current;\r\n\r\n\r\n  const room = state.rooms[state.currentRoom];\r\n  const roomId = room?.id;\r\n  const messages = room?.messages;\r\n\r\n  const room_name_transform = (names, username) => {\r\n    for (let name of names) {\r\n      if (typeof name !== 'string') {\r\n        name = name[0];\r\n      }\r\n      if (name !== username) {\r\n        return name;\r\n      }\r\n    }\r\n    return names[0];\r\n  };\r\n  const [test, setTest] = useState(true)\r\n\r\n  const scrollToTop = useCallback(() => {\r\n    setTimeout(() => {\r\n      if (messageListElement.current) {\r\n        messageListElement.current.scrollTop = 0;\r\n      }\r\n    }, 0);\r\n  }, []);\r\n\r\n  const scrollToBottom = useCallback(() => {\r\n    if (messageListElement.current) {\r\n      messageListElement.current.scrollTo({\r\n        top: messageListElement.current.scrollHeight,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, scrollToBottom]);\r\n\r\n  const get_useres_msgs = async (users, dispatch, messages) => {\r\n    const userIds = {};\r\n    messages.forEach((message) => {\r\n      userIds[message.from] = 1;\r\n    });\r\n  \r\n    const ids = Object.keys(userIds).filter(\r\n      (id) => users[id] === undefined\r\n    );\r\n  \r\n    if (ids.length !== 0) {\r\n      const newUsers = await getUsers(ids);\r\n      dispatch({\r\n        type: \"add users\",\r\n        payload: newUsers,\r\n      });\r\n    }\r\n  \r\n  };\r\n\r\n  const onFetchMessages = useCallback(\r\n    (offset = 0) => {\r\n      getMessages(roomId, offset).then(async (messages) => {\r\n        await get_useres_msgs(state.users, dispatch, messages);\r\n        dispatch({\r\n          type:  \"set messages\",\r\n          payload: { id: roomId, messages: messages },\r\n        });\r\n      \r\n        scrollToBottom();\r\n      \r\n      });\r\n    },\r\n    [dispatch, roomId, scrollToBottom, scrollToTop, state.users]\r\n  );\r\n\r\n  useEffect(() => {\r\n\r\n    if (roomId === undefined) {\r\n      return;\r\n    }\r\n    if (messages === undefined) {\r\n      onFetchMessages();\r\n    }\r\n  }, [\r\n    messages,\r\n    dispatch,\r\n    roomId,\r\n    state.users,\r\n    state,\r\n    scrollToBottom,\r\n    onFetchMessages,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (messageListElement.current) {\r\n      scrollToBottom();\r\n    }\r\n  }, [scrollToBottom, roomId]);\r\n\r\n  const onUserClicked = async (userId) => {\r\n    const targetUser = state.users[userId];\r\n    let roomId = targetUser.room;\r\n    if (roomId === undefined) {\r\n      const room = await addRoom(userId, user.id);\r\n      roomId = room.id;\r\n      dispatch({ type: \"set user\", payload: { ...targetUser, room: roomId } });\r\n      dispatch({\r\n        type: \"add room\",\r\n        payload: { id: roomId, name: room_name_transform(room.names, user.username) },\r\n      });\r\n    }\r\n    dispatch({ type: \"set current room\", payload: roomId });\r\n  };\r\n\r\n  const onLoadMoreMessages = useCallback(() => {\r\n    onFetchMessages(room.offset, true);\r\n  }, [onFetchMessages, room]);\r\n\r\n\r\n  const [expSec, setExpSec] = useState(60)\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n\r\n  const handleImageChange = (e) => {\r\n    setSelectedImage(e.target.files[0]);\r\n  };\r\n\r\n\r\n  const onSubmit= (e) => {\r\n              e.preventDefault();\r\n              if(message){\r\n                onMessageSend(message.trim(), roomId, expSec, \"text\");\r\n                setMessage(\"\");\r\n                onMessageSend(\"\", 0, 0)\r\n                messageListElement.current.scrollTop =\r\n                  messageListElement.current.scrollHeight;\r\n                setTimeout(() => {\r\n                  messageListElement.current.scrollTop =\r\n                  messageListElement.current.scrollHeight;\r\n                }, 100);\r\n              }\r\n              if(selectedImage)\r\n              {\r\n                const reader = new FileReader();\r\n                reader.onload = function(){\r\n                  \r\n                  // Use socket.io to send the image data\r\n                  // socket.emit('image', { imageData: e.target.result, filename: selectedImage.name });\r\n                  const base64 = this.result.replace(/.*base64,/, '');\r\n                  onMessageSend(base64, roomId, expSec, \"image\");\r\n\r\n                };\r\n                //reader.readAsArrayBuffer(selectedImage)\r\n                reader.readAsDataURL(selectedImage)\r\n                setSelectedImage(null);\r\n                onMessageSend(\"\", 0, 0)\r\n                messageListElement.current.scrollTop =\r\n                  messageListElement.current.scrollHeight;\r\n                setTimeout(() => {\r\n                  messageListElement.current.scrollTop =\r\n                  messageListElement.current.scrollHeight;\r\n                }, 100);\r\n                setShowUploadFile(false)\r\n\r\n              }\r\n            };\r\n\r\n  return (\r\n    <Container className=\"py-5 px-4\">\r\n      <Row className=\"overflow-hidden shadow bg-light chat-body\">\r\n\r\n        <Col xs={3} className=\"px-0\">\r\n          <Rooms\r\n            user={user}\r\n            onLogOut={onLogOut}\r\n            users={state.users}\r\n            rooms={state.rooms}\r\n            currentRoom={state.currentRoom}\r\n            dispatch={dispatch}\r\n          />\r\n        </Col>\r\n        {/* Chat Box*/}\r\n        <Col xs={6} className=\"px-0 flex-column bg-white\">\r\n          <div className=\"px-4 py-4\" style={{ borderBottom: \"1px solid #eee\" }}>\r\n            <h2 className=\"font-size-15 mb-0\">{room ? room.name : \"Room\"}</h2>\r\n          </div>\r\n          <Messages\r\n            messageListElement={messageListElement}\r\n            messages={messages}\r\n            room={room}\r\n            onLoadMoreMessages={onLoadMoreMessages}\r\n            user={user}\r\n            onUserClicked={onUserClicked}\r\n            users={state.users}\r\n          />\r\n\r\n          <div className=\"p-3 chat-input-section\">\r\n            <form className=\"row\" encType=\"multipart/form-data\" onSubmit={onSubmit} >\r\n              \r\n              <Col xs='1'><Button className=\"btin btn-secondary w-sm\" onClick={() => {setShowUploadFile(!showUploadFile)}}>+</Button></Col>\r\n              {\r\n                !showUploadFile ? (\r\n                  <Col  xs='5'>\r\n                    <div className=\"position-relative\">\r\n                      <Form.Control\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        type=\"text\"\r\n                        className=\"form-control chat-input\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                ) :\r\n                (\r\n                  <Col  xs='5'>\r\n                    <input type=\"file\" onChange={handleImageChange} accept=\"image/*\" />\r\n                  </Col>\r\n                    )\r\n              }\r\n              <Col xs='2' className=\"mr-3 py-1\">\r\n              <select value={expSec} onChange={(event) => {setExpSec(event.target.value);}}>\r\n                <option value={3600}>1 hour</option>\r\n                <option value={1800}>30 minute</option>\r\n                <option value={60}>1 minute</option>\r\n                <option value={9999999999}>never</option>\r\n              </select>\r\n              </Col>\r\n\r\n              <Col xs=\"auto\">\r\n                <Button type=\"submit\" className=\"btn btn-secondary w-sm\">Send</Button>\r\n              </Col>\r\n            </form>\r\n          </div>\r\n        </Col>\r\n        <Col xs={3}>\r\n          <Users  dispatch={dispatch} userProp={user} onMessageSend={onMessageSend} /> \r\n        </Col>\r\n\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\index.jsx",["85","86","87"],"import React, { useEffect, useState } from \"react\";\r\nimport { MESSAGES_TO_LOAD } from \"../../../../services/user.service\";\r\nimport MsgRec from \"./components/MsgRec\";\r\nimport MsgSnd from \"./components/MsgSnd\";\r\nimport {Card, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst Messages = ({\r\n  messageListElement,\r\n  messages,\r\n  room,\r\n  onLoadMoreMessages,\r\n  user,\r\n  onUserClicked,\r\n  users,\r\n}) => {\r\n  const [filteredMessages, setFilteredMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Function to filter out expired messages\r\n    let isMounted = true;\r\n    const filterExpiredMessages = () => {\r\n      const currentTimestamp = Date.now();\r\n      \r\n\r\n      if (messages) {\r\n        const filtered = messages.filter((message) => {\r\n          // console.log(new Date(message.expDate));\r\n          // console.log(new Date(currentTimestamp));\r\n          // let expDate = new Date(message.expDate)\r\n          const expDate = moment(message.expDate).unix()\r\n          const currentText=  Math.floor(currentTimestamp/1000)\r\n          // console.log(\"EXPDATE: \",expDate)\r\n          // console.log(\"CURRENT TIMESTAMP: \", currentText)\r\n          // console.log(expDate - currentText)\r\n          if (message.expDate && new Date(message.expDate) <= new Date(currentTimestamp)) {\r\n            // Message has expired\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n        setFilteredMessages(filtered);\r\n      }\r\n    };\r\n\r\n    // Initial filter\r\n    if (isMounted) filterExpiredMessages();\r\n\r\n    // Set up a timer to periodically filter expired messages\r\n    const refreshInterval = setInterval(() => {\r\n      filterExpiredMessages();\r\n    }, 1000); // Adjust the interval as needed (e.g., 60 seconds)\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      clearInterval(refreshInterval);\r\n    };\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div ref={messageListElement} className=\"chat-box-wrapper position-relative d-flex\">\r\n      {messages === undefined ? (\r\n        <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\r\n          <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"visually-hidden\" />\r\n          </div>\r\n        </div>\r\n      ) : messages.length === 0 ? (\r\n        <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\r\n          <Card size={96} />\r\n          <p>No messages</p>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <div className=\"px-4 pt-5 chat-box position-absolute\">\r\n        {filteredMessages && filteredMessages.length !== 0 && (\r\n          <>\r\n            {room.offset && room.offset >= MESSAGES_TO_LOAD ? (\r\n              <div className=\"d-flex flex-row align-items-center mb-4\">\r\n                <div style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}></div>\r\n                <div className=\"mx-3\">\r\n                  <Button\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded=\"true\"\r\n                    type=\"button\"\r\n                    onClick={onLoadMoreMessages}\r\n                    className=\"btn rounded-button btn-secondary nav-btn\"\r\n                    id=\"__BVID__168__BV_toggle_\"\r\n                  >\r\n                    Load more\r\n                  </Button>\r\n                </div>\r\n                <div style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}></div>\r\n              </div>\r\n            ) : null\r\n            }\r\n            {filteredMessages.map((message, x) => {\r\n              const key = message.message + message.date + message.from + x;\r\n              if (message.from === \"info\") {\r\n                return (\r\n                  <p\r\n                    className=\"mb-2 fs-6 fw-light fst-italic text-black-50 text-center\"\r\n                    style={{ opacity: 0.7, fontSize: 13 }}\r\n                  >\r\n                    {message.message}\r\n                  </p>\r\n                );\r\n              }\r\n              if (+message.from !== +user.id) {\r\n                return (\r\n                  <MsgSnd\r\n                    onUserClicked={() => onUserClicked(message.from)}\r\n                    key={key}\r\n                    message={message.message}\r\n                    date={message.date}\r\n                    user={users[message.from]}\r\n                    type={message.type}\r\n                    TTL={moment(message.expDate).unix() - Math.floor(Date.now()/1000)}\r\n                  />\r\n                );\r\n              }\r\n              return (\r\n                <MsgRec\r\n                  username={users[message.from] ? users[message.from].username : \"\"}\r\n                  key={key}\r\n                  message={message.message}\r\n                  date={message.date}\r\n                  type={message.type}\r\n                  TTL={moment(message.expDate).unix() - Math.floor(Date.now()/1000)}\r\n\r\n                />\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Rooms\\index.jsx",["88","89"],"import React, { useEffect, useMemo } from \"react\";\r\nimport ChatListItem from \"./components/ChatListItem\";\r\nimport { Container, ListGroup, ListGroupItem } from \"react-bootstrap\";\r\n\r\nconst Rooms = ({ rooms, dispatch, users, user, currentRoom, onLogOut }) => {\r\n  const processedRooms = useMemo(() => {\r\n    const roomsList = Object.values(rooms);\r\n    const main = roomsList.find((x) => x.id === \"0\");\r\n    let other = roomsList.filter((x) => x.id !== \"0\");\r\n    other = other.sort(\r\n      (a, b) => +a.id.split(\":\").pop() - +b.id.split(\":\").pop()\r\n    );\r\n    return main ? [main, ...other] : other;\r\n  }, [rooms]);\r\n\r\n  return (\r\n    <Container className=\"chat-list-container flex-column d-flex pr-4\">\r\n      <div className=\"py-2\">\r\n        <p className=\"h4 mb-0 py-1 chats-title\">Rooms:</p>\r\n      </div>\r\n      <div className=\"messages-box flex flex-1\">\r\n        <ListGroup>\r\n          {processedRooms.map((room) => (\r\n            <ChatListItem\r\n              key={room.id}\r\n              users={users}\r\n              onClick={() =>\r\n                dispatch({ type: \"set current room\", payload: room.id })\r\n              }\r\n              active={currentRoom === room.id}\r\n              room={room}\r\n            />\r\n          ))}\r\n        </ListGroup>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Rooms;\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Users\\index.jsx",["90","91","92","93"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAppState } from \"../../../../state\";\r\nimport { addRoom, getAllUsers } from \"../../../../services/user.service\";\r\nimport { Col, Row, InputGroup, FormControl, ListGroup, Button, Container } from \"react-bootstrap\";\r\n\r\nconst Users = ({ dispatch, userProp, onMessageSend }) => {\r\n  const [users, setUsers] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [state] = useAppState();\r\n\r\n  useEffect(() => {\r\n    getAllUsers().then((data) => {\r\n      setUsers(data);\r\n    });\r\n  }, []);\r\n\r\n  const filteredUsers = users.filter((user) =>\r\n    user.username.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const onClick = async (user1_id, user2_id) => {\r\n    const result = await addRoom(user1_id, user2_id);\r\n    console.log(result.id);\r\n    onMessageSend(\"Hello!\", result.id, 99999999, \"text\");\r\n    window.location.reload(false);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"chat-list-container flex-column d-flex pr-4\">\r\n      <div className=\"py-2\">\r\n        <p className=\"h5 mb-0 py-1 chats-title\">Search for a user</p>\r\n      </div>\r\n      <div className=\"messages-box flex flex-1\">\r\n        <div className=\"search-bar\">\r\n          <InputGroup className=\"mb-3\">\r\n            <FormControl\r\n              type=\"text\"\r\n              placeholder=\"Search users...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n          </InputGroup>\r\n        </div>\r\n        <Container>\r\n          {filteredUsers.map((user) => {\r\n            return user.id != userProp.id ? (\r\n              <Row key={user.id} className=\"p-2 border-bottom\" style={{}} >\r\n                <Col className=\"cursor-pointer\" style={{cursor:'pointer'}} onClick={() => onClick(userProp.id, user.id)}> <h5>{user.username}</h5></Col>\r\n              </Row>\r\n            ) : null;\r\n          })}\r\n        </Container>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\components\\MsgRec.jsx",["94","95"],"import moment from \"moment\";\r\nimport React from \"react\";\r\n\r\nfunction formatTimeDuration(seconds) {\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  // Format with leading zeros if necessary\r\n  const formattedMinutes = String(minutes).padStart(2, '0');\r\n  const formattedSeconds = String(remainingSeconds).padStart(2, '0');\r\n\r\n  return `${formattedMinutes}:${formattedSeconds}`;\r\n}\r\n\r\nconst MsgRec = ({\r\n  username = \"\",\r\n  message = \"...\",\r\n  date,\r\n  type,\r\n  TTL,\r\n}) => (\r\n  <div className=\"d-flex\">\r\n    <div style={{ flex: 1 }} />\r\n    <div style={{ width: \"55%\" }} className=\"text-right mb-4\">\r\n      <div className=\"conversation-list d-inline-block bg-light px-3 py-2\" >\r\n        <div className=\"ctext-wrap\">\r\n        <div className=\"conversation-name text-primary d-flex align-items-center mb-1\">\r\n            <div className=\"mr-2\" style={{ fontWeight: 600, cursor: \"pointer\", }}> {username}</div>\r\n            { (TTL < 3600) &&\r\n                <> \r\n                <div className=\"ml-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"0.8em\" fill=\"#495057\" viewBox=\"0 0 384 512\"><path d=\"M0 32C0 14.3 14.3 0 32 0H64 320h32c17.7 0 32 14.3 32 32s-14.3 32-32 32V75c0 42.4-16.9 83.1-46.9 113.1L237.3 256l67.9 67.9c30 30 46.9 70.7 46.9 113.1v11c17.7 0 32 14.3 32 32s-14.3 32-32 32H320 64 32c-17.7 0-32-14.3-32-32s14.3-32 32-32V437c0-42.4 16.9-83.1 46.9-113.1L146.7 256 78.9 188.1C48.9 158.1 32 117.4 32 75V64C14.3 64 0 49.7 0 32zM96 64V75c0 25.5 10.1 49.9 28.1 67.9L192 210.7l67.9-67.9c18-18 28.1-42.4 28.1-67.9V64H96zm0 384H288V437c0-25.5-10.1-49.9-28.1-67.9L192 301.3l-67.9 67.9c-18 18-28.1 42.4-28.1 67.9v11z\"/></svg></div>\r\n                <div className=\"ml-1\" style={{fontSize: 12, color:\"#495057\", width:\"2em\"}}>{formatTimeDuration(TTL)}</div>\r\n                </>\r\n              }\r\n          </div>\r\n          {type == \"text\" && (<p className=\"text-left\">{message}</p>)}\r\n          {type == \"image\" && (<p className=\"text-left\">  <img src= {`data:image/png;base64, ${message}`} alt=\"Red dot\" style={{ width: \"100%\", height: \"100%\" }} /></p>)}\r\n\r\n          <p className=\"chat-time mb-0\">{moment.unix(date).format(\"LT\")}</p>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nexport default MsgRec;\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\components\\MsgSnd.jsx",["96","97","98"],"import moment from \"moment\";\r\nimport React from \"react\";\r\nimport StatusComponent from \"../../StatusComponent\";\r\nimport Timer from \"./components/Timer\";\r\n\r\nfunction formatTimeDuration(seconds) {\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  // Format with leading zeros if necessary\r\n  const formattedMinutes = String(minutes).padStart(2, '0');\r\n  const formattedSeconds = String(remainingSeconds).padStart(2, '0');\r\n\r\n  return `${formattedMinutes}:${formattedSeconds}`;\r\n}\r\nconst MsgSnd = ({\r\n  user,\r\n  message = \"...\",\r\n  date,\r\n  onUserClicked,\r\n  type,\r\n  TTL,\r\n}) => (\r\n  <div className=\"d-flex\">\r\n    <div style={{ width: \"50%\" }} className=\"text-left mb-4\">\r\n      <div\r\n        className=\"conversation-list d-inline-block px-3 py-2\"\r\n        style={{backgroundColor: \"#c7eaec\" }}\r\n      >\r\n        <div className=\"ctext-wrap\">\r\n          {user && (\r\n            <div className=\"conversation-name text-primary d-flex align-items-center mb-1\">\r\n              <div className=\"mr-2\" style={{ fontWeight: 600, cursor: \"pointer\", }} onClick={onUserClicked}> {user.username}</div>\r\n              <StatusComponent width={7} height={7} online={user.online} />\r\n              { (TTL < 3600) &&\r\n                <> \r\n                <div className=\"ml-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#495057\" height=\"0.8em\" viewBox=\"0 0 384 512\"><path d=\"M0 32C0 14.3 14.3 0 32 0H64 320h32c17.7 0 32 14.3 32 32s-14.3 32-32 32V75c0 42.4-16.9 83.1-46.9 113.1L237.3 256l67.9 67.9c30 30 46.9 70.7 46.9 113.1v11c17.7 0 32 14.3 32 32s-14.3 32-32 32H320 64 32c-17.7 0-32-14.3-32-32s14.3-32 32-32V437c0-42.4 16.9-83.1 46.9-113.1L146.7 256 78.9 188.1C48.9 158.1 32 117.4 32 75V64C14.3 64 0 49.7 0 32zM96 64V75c0 25.5 10.1 49.9 28.1 67.9L192 210.7l67.9-67.9c18-18 28.1-42.4 28.1-67.9V64H96zm0 384H288V437c0-25.5-10.1-49.9-28.1-67.9L192 301.3l-67.9 67.9c-18 18-28.1 42.4-28.1 67.9v11z\"/></svg></div>\r\n                <div className=\"ml-1\" style={{fontSize: 12, color:\"#495057\", width:\"2em\"}}>{formatTimeDuration(TTL)}</div>\r\n                </>\r\n              }\r\n              </div>\r\n          )}\r\n          \r\n          {type == \"text\" && (<p className=\"text-left\">{message}</p>)}\r\n          {type == \"image\" && (<p className=\"text-left\">  <img src= {`data:image/png;base64, ${message}`} alt=\"Red dot\" style={{ width: \"100%\", height: \"100%\" }} /></p>)}\r\n\r\n          <p className=\"chat-time mb-0\">{moment.unix(date).format(\"LT\")}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div style={{ flex: 1 }} />\r\n  </div>\r\n);\r\n\r\nexport default MsgSnd;\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Rooms\\components\\ChatListItem\\index.jsx",["99","100","101","102","103","104"],"import \"./style.css\";\r\nimport React, { useMemo } from \"react\";\r\nimport { useAppState } from \"../../../../../../state\";\r\nimport moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\nimport { getMessages } from \"../../../../../../services/user.service\";\r\nimport StatusComponent from \"../../../StatusComponent\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nconst formatDate = (timestamp) => {\r\n  const date = new Date(timestamp * 1000);\r\n  const hours = date.getHours().toString().padStart(2, \"0\");\r\n  const minutes = date.getMinutes().toString().padStart(2, \"0\");\r\n  return `${hours}:${minutes}`;\r\n};\r\n\r\n\r\nconst ChatListItem = ({ onClick,users, active = false, room}) => {\r\n  const { id, name } = room;\r\n\r\n  const [online] = useMemo(() => {\r\n    try {\r\n      const usersFiltered = Object.entries(users)\r\n        .filter(([, user]) => user.username === name)\r\n        .map(([, user]) => user);\r\n      let online = false;\r\n      if (usersFiltered.length > 0) {\r\n        online = usersFiltered[0].online;\r\n      }\r\n      return [online];\r\n    } catch (_) {\r\n      return [false, false, \"0\"];\r\n    }\r\n  }, [id, name, users]);\r\n\r\n\r\n  return(   \r\n    <Row onClick={onClick} className={`chat-list-item d-flex align-items-start ${active ? \"bg-white\" : \"\"}`}>\r\n\r\n      <Col className=\"align-self-center mr-2 col-1\">\r\n        <StatusComponent online={online} hide={room.id === \"0\"} />\r\n      </Col>\r\n\r\n      <Col className=\"media-body overflow-hidden col-9\">\r\n        <h5 className=\"text-truncate font-size-15 mb-1\">{name}</h5>\r\n      </Col>\r\n\r\n    </Row>\r\n  );\r\n\r\n}\r\n\r\nexport default ChatListItem;\r\n","C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\StatusComponent.jsx",[],"C:\\Users\\dimit\\Desktop\\chatapp\\client\\src\\components\\Chat\\components\\Messages\\components\\components\\Timer\\index.jsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":8,"column":18,"nodeType":"111","messageId":"112","endLine":8,"endColumn":21},{"ruleId":"109","severity":1,"message":"113","line":8,"column":34,"nodeType":"111","messageId":"112","endLine":8,"endColumn":39},{"ruleId":"114","severity":1,"message":"115","line":95,"column":16,"nodeType":"116","messageId":"117","endLine":95,"endColumn":18},{"ruleId":"109","severity":1,"message":"118","line":1,"column":31,"nodeType":"111","messageId":"112","endLine":1,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":1,"column":36,"nodeType":"111","messageId":"112","endLine":1,"endColumn":39},{"ruleId":"109","severity":1,"message":"119","line":2,"column":27,"nodeType":"111","messageId":"112","endLine":2,"endColumn":33},{"ruleId":"109","severity":1,"message":"120","line":2,"column":35,"nodeType":"111","messageId":"112","endLine":2,"endColumn":44},{"ruleId":"109","severity":1,"message":"121","line":18,"column":9,"nodeType":"111","messageId":"112","endLine":18,"endColumn":15},{"ruleId":"109","severity":1,"message":"122","line":36,"column":10,"nodeType":"111","messageId":"112","endLine":36,"endColumn":14},{"ruleId":"109","severity":1,"message":"123","line":36,"column":16,"nodeType":"111","messageId":"112","endLine":36,"endColumn":23},{"ruleId":"124","severity":1,"message":"125","line":91,"column":5,"nodeType":"126","endLine":91,"endColumn":65,"suggestions":"127"},{"ruleId":"109","severity":1,"message":"128","line":31,"column":17,"nodeType":"111","messageId":"112","endLine":31,"endColumn":24},{"ruleId":"109","severity":1,"message":"129","line":32,"column":17,"nodeType":"111","messageId":"112","endLine":32,"endColumn":28},{"ruleId":"130","severity":1,"message":"131","line":58,"column":5,"nodeType":"132","messageId":"133","endLine":60,"endColumn":7},{"ruleId":"109","severity":1,"message":"120","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"134","line":3,"column":32,"nodeType":"111","messageId":"112","endLine":3,"endColumn":45},{"ruleId":"109","severity":1,"message":"135","line":4,"column":45,"nodeType":"111","messageId":"112","endLine":4,"endColumn":54},{"ruleId":"109","severity":1,"message":"136","line":4,"column":56,"nodeType":"111","messageId":"112","endLine":4,"endColumn":62},{"ruleId":"109","severity":1,"message":"137","line":9,"column":10,"nodeType":"111","messageId":"112","endLine":9,"endColumn":15},{"ruleId":"114","severity":1,"message":"138","line":46,"column":28,"nodeType":"116","messageId":"117","endLine":46,"endColumn":30},{"ruleId":"114","severity":1,"message":"115","line":36,"column":17,"nodeType":"116","messageId":"117","endLine":36,"endColumn":19},{"ruleId":"114","severity":1,"message":"115","line":37,"column":17,"nodeType":"116","messageId":"117","endLine":37,"endColumn":19},{"ruleId":"109","severity":1,"message":"139","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":13},{"ruleId":"114","severity":1,"message":"115","line":44,"column":17,"nodeType":"116","messageId":"117","endLine":44,"endColumn":19},{"ruleId":"114","severity":1,"message":"115","line":45,"column":17,"nodeType":"116","messageId":"117","endLine":45,"endColumn":19},{"ruleId":"109","severity":1,"message":"140","line":3,"column":10,"nodeType":"111","messageId":"112","endLine":3,"endColumn":21},{"ruleId":"109","severity":1,"message":"141","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":14},{"ruleId":"109","severity":1,"message":"120","line":5,"column":10,"nodeType":"111","messageId":"112","endLine":5,"endColumn":19},{"ruleId":"109","severity":1,"message":"142","line":6,"column":10,"nodeType":"111","messageId":"112","endLine":6,"endColumn":21},{"ruleId":"109","severity":1,"message":"143","line":10,"column":7,"nodeType":"111","messageId":"112","endLine":10,"endColumn":17},{"ruleId":"124","severity":1,"message":"144","line":34,"column":6,"nodeType":"126","endLine":34,"endColumn":23,"suggestions":"145"},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Stack' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Col' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'socket' is assigned a value but never used.","'test' is assigned a value but never used.","'setTest' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'scrollToTop'. Either exclude it or remove the dependency array.","ArrayExpression",["148"],"'expDate' is assigned a value but never used.","'currentText' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'ListGroupItem' is defined but never used.","'ListGroup' is defined but never used.","'Button' is defined but never used.","'state' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Timer' is defined but never used.","'useAppState' is defined but never used.","'moment' is defined but never used.","'getMessages' is defined but never used.","'formatDate' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'id'. Either exclude it or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [dispatch, roomId, scrollToBottom, state.users]",{"range":"154","text":"155"},"Update the dependencies array to be: [name, users]",{"range":"156","text":"157"},[2524,2584],"[dispatch, roomId, scrollToBottom, state.users]",[1108,1125],"[name, users]"]